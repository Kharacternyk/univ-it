# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import database_pb2 as database__pb2


class DatabaseServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DownloadDatabase = channel.unary_unary(
                '/DatabaseService/DownloadDatabase',
                request_serializer=database__pb2.DatabaseHandle.SerializeToString,
                response_deserializer=database__pb2.Database.FromString,
                )
        self.UploadDatabase = channel.unary_unary(
                '/DatabaseService/UploadDatabase',
                request_serializer=database__pb2.NamedDatabase.SerializeToString,
                response_deserializer=database__pb2.Void.FromString,
                )
        self.DeleteDatabase = channel.unary_unary(
                '/DatabaseService/DeleteDatabase',
                request_serializer=database__pb2.DatabaseHandle.SerializeToString,
                response_deserializer=database__pb2.Void.FromString,
                )
        self.DiffTables = channel.unary_unary(
                '/DatabaseService/DiffTables',
                request_serializer=database__pb2.TableDiff.SerializeToString,
                response_deserializer=database__pb2.Void.FromString,
                )


class DatabaseServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DownloadDatabase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadDatabase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDatabase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DiffTables(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatabaseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DownloadDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadDatabase,
                    request_deserializer=database__pb2.DatabaseHandle.FromString,
                    response_serializer=database__pb2.Database.SerializeToString,
            ),
            'UploadDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadDatabase,
                    request_deserializer=database__pb2.NamedDatabase.FromString,
                    response_serializer=database__pb2.Void.SerializeToString,
            ),
            'DeleteDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDatabase,
                    request_deserializer=database__pb2.DatabaseHandle.FromString,
                    response_serializer=database__pb2.Void.SerializeToString,
            ),
            'DiffTables': grpc.unary_unary_rpc_method_handler(
                    servicer.DiffTables,
                    request_deserializer=database__pb2.TableDiff.FromString,
                    response_serializer=database__pb2.Void.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DatabaseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DatabaseService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DownloadDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DatabaseService/DownloadDatabase',
            database__pb2.DatabaseHandle.SerializeToString,
            database__pb2.Database.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DatabaseService/UploadDatabase',
            database__pb2.NamedDatabase.SerializeToString,
            database__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DatabaseService/DeleteDatabase',
            database__pb2.DatabaseHandle.SerializeToString,
            database__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DiffTables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DatabaseService/DiffTables',
            database__pb2.TableDiff.SerializeToString,
            database__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
