# coding: utf-8

"""
    Database API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_column(self, database_name, table_index, **kwargs):  # noqa: E501
        """create_column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_column(database_name, table_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_name: (required)
        :param int table_index: (required)
        :param TableIndexColumnsBody body:
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_column_with_http_info(database_name, table_index, **kwargs)  # noqa: E501
        else:
            (data) = self.create_column_with_http_info(database_name, table_index, **kwargs)  # noqa: E501
            return data

    def create_column_with_http_info(self, database_name, table_index, **kwargs):  # noqa: E501
        """create_column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_column_with_http_info(database_name, table_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_name: (required)
        :param int table_index: (required)
        :param TableIndexColumnsBody body:
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['database_name', 'table_index', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_column" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_name' is set
        if ('database_name' not in params or
                params['database_name'] is None):
            raise ValueError("Missing the required parameter `database_name` when calling `create_column`")  # noqa: E501
        # verify the required parameter 'table_index' is set
        if ('table_index' not in params or
                params['table_index'] is None):
            raise ValueError("Missing the required parameter `table_index` when calling `create_column`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_name' in params:
            path_params['databaseName'] = params['database_name']  # noqa: E501
        if 'table_index' in params:
            path_params['tableIndex'] = params['table_index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/databases/{databaseName}/tables/{tableIndex}/columns', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_database(self, name, **kwargs):  # noqa: E501
        """create_database  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_database(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_database_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_database_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def create_database_with_http_info(self, name, **kwargs):  # noqa: E501
        """create_database  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_database_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/databases/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_row(self, database_name, table_index, **kwargs):  # noqa: E501
        """create_row  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_row(database_name, table_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_name: (required)
        :param int table_index: (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_row_with_http_info(database_name, table_index, **kwargs)  # noqa: E501
        else:
            (data) = self.create_row_with_http_info(database_name, table_index, **kwargs)  # noqa: E501
            return data

    def create_row_with_http_info(self, database_name, table_index, **kwargs):  # noqa: E501
        """create_row  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_row_with_http_info(database_name, table_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_name: (required)
        :param int table_index: (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['database_name', 'table_index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_row" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_name' is set
        if ('database_name' not in params or
                params['database_name'] is None):
            raise ValueError("Missing the required parameter `database_name` when calling `create_row`")  # noqa: E501
        # verify the required parameter 'table_index' is set
        if ('table_index' not in params or
                params['table_index'] is None):
            raise ValueError("Missing the required parameter `table_index` when calling `create_row`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_name' in params:
            path_params['databaseName'] = params['database_name']  # noqa: E501
        if 'table_index' in params:
            path_params['tableIndex'] = params['table_index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/databases/{databaseName}/tables/{tableIndex}/rows', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_table(self, name, **kwargs):  # noqa: E501
        """create_table  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_table(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_table_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_table_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def create_table_with_http_info(self, name, **kwargs):  # noqa: E501
        """create_table  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_table_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_table`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/databases/{name}/tables', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_column(self, database_name, table_index, column_index, **kwargs):  # noqa: E501
        """delete_column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_column(database_name, table_index, column_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_name: (required)
        :param int table_index: (required)
        :param int column_index: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_column_with_http_info(database_name, table_index, column_index, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_column_with_http_info(database_name, table_index, column_index, **kwargs)  # noqa: E501
            return data

    def delete_column_with_http_info(self, database_name, table_index, column_index, **kwargs):  # noqa: E501
        """delete_column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_column_with_http_info(database_name, table_index, column_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_name: (required)
        :param int table_index: (required)
        :param int column_index: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['database_name', 'table_index', 'column_index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_column" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_name' is set
        if ('database_name' not in params or
                params['database_name'] is None):
            raise ValueError("Missing the required parameter `database_name` when calling `delete_column`")  # noqa: E501
        # verify the required parameter 'table_index' is set
        if ('table_index' not in params or
                params['table_index'] is None):
            raise ValueError("Missing the required parameter `table_index` when calling `delete_column`")  # noqa: E501
        # verify the required parameter 'column_index' is set
        if ('column_index' not in params or
                params['column_index'] is None):
            raise ValueError("Missing the required parameter `column_index` when calling `delete_column`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_name' in params:
            path_params['databaseName'] = params['database_name']  # noqa: E501
        if 'table_index' in params:
            path_params['tableIndex'] = params['table_index']  # noqa: E501
        if 'column_index' in params:
            path_params['columnIndex'] = params['column_index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/databases/{databaseName}/tables/{tableIndex}/columns/{columnIndex}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_database(self, name, **kwargs):  # noqa: E501
        """delete_database  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_database(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_database_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_database_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_database_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_database  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_database_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/databases/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_table(self, database_name, table_index, **kwargs):  # noqa: E501
        """delete_table  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_table(database_name, table_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_name: (required)
        :param int table_index: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_table_with_http_info(database_name, table_index, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_table_with_http_info(database_name, table_index, **kwargs)  # noqa: E501
            return data

    def delete_table_with_http_info(self, database_name, table_index, **kwargs):  # noqa: E501
        """delete_table  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_table_with_http_info(database_name, table_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_name: (required)
        :param int table_index: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['database_name', 'table_index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_name' is set
        if ('database_name' not in params or
                params['database_name'] is None):
            raise ValueError("Missing the required parameter `database_name` when calling `delete_table`")  # noqa: E501
        # verify the required parameter 'table_index' is set
        if ('table_index' not in params or
                params['table_index'] is None):
            raise ValueError("Missing the required parameter `table_index` when calling `delete_table`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_name' in params:
            path_params['databaseName'] = params['database_name']  # noqa: E501
        if 'table_index' in params:
            path_params['tableIndex'] = params['table_index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/databases/{databaseName}/tables/{tableIndex}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cell(self, database_name, table_index, row_index, cell_index, **kwargs):  # noqa: E501
        """get_cell  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cell(database_name, table_index, row_index, cell_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_name: (required)
        :param int table_index: (required)
        :param int row_index: (required)
        :param int cell_index: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cell_with_http_info(database_name, table_index, row_index, cell_index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cell_with_http_info(database_name, table_index, row_index, cell_index, **kwargs)  # noqa: E501
            return data

    def get_cell_with_http_info(self, database_name, table_index, row_index, cell_index, **kwargs):  # noqa: E501
        """get_cell  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cell_with_http_info(database_name, table_index, row_index, cell_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_name: (required)
        :param int table_index: (required)
        :param int row_index: (required)
        :param int cell_index: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['database_name', 'table_index', 'row_index', 'cell_index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cell" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_name' is set
        if ('database_name' not in params or
                params['database_name'] is None):
            raise ValueError("Missing the required parameter `database_name` when calling `get_cell`")  # noqa: E501
        # verify the required parameter 'table_index' is set
        if ('table_index' not in params or
                params['table_index'] is None):
            raise ValueError("Missing the required parameter `table_index` when calling `get_cell`")  # noqa: E501
        # verify the required parameter 'row_index' is set
        if ('row_index' not in params or
                params['row_index'] is None):
            raise ValueError("Missing the required parameter `row_index` when calling `get_cell`")  # noqa: E501
        # verify the required parameter 'cell_index' is set
        if ('cell_index' not in params or
                params['cell_index'] is None):
            raise ValueError("Missing the required parameter `cell_index` when calling `get_cell`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_name' in params:
            path_params['databaseName'] = params['database_name']  # noqa: E501
        if 'table_index' in params:
            path_params['tableIndex'] = params['table_index']  # noqa: E501
        if 'row_index' in params:
            path_params['rowIndex'] = params['row_index']  # noqa: E501
        if 'cell_index' in params:
            path_params['cellIndex'] = params['cell_index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/databases/{databaseName}/tables/{tableIndex}/rows/{rowIndex}/cells/{cellIndex}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_column(self, database_name, table_index, column_index, **kwargs):  # noqa: E501
        """get_column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_column(database_name, table_index, column_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_name: (required)
        :param int table_index: (required)
        :param int column_index: (required)
        :return: DatabasesnameColumns
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_column_with_http_info(database_name, table_index, column_index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_column_with_http_info(database_name, table_index, column_index, **kwargs)  # noqa: E501
            return data

    def get_column_with_http_info(self, database_name, table_index, column_index, **kwargs):  # noqa: E501
        """get_column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_column_with_http_info(database_name, table_index, column_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_name: (required)
        :param int table_index: (required)
        :param int column_index: (required)
        :return: DatabasesnameColumns
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['database_name', 'table_index', 'column_index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_column" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_name' is set
        if ('database_name' not in params or
                params['database_name'] is None):
            raise ValueError("Missing the required parameter `database_name` when calling `get_column`")  # noqa: E501
        # verify the required parameter 'table_index' is set
        if ('table_index' not in params or
                params['table_index'] is None):
            raise ValueError("Missing the required parameter `table_index` when calling `get_column`")  # noqa: E501
        # verify the required parameter 'column_index' is set
        if ('column_index' not in params or
                params['column_index'] is None):
            raise ValueError("Missing the required parameter `column_index` when calling `get_column`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_name' in params:
            path_params['databaseName'] = params['database_name']  # noqa: E501
        if 'table_index' in params:
            path_params['tableIndex'] = params['table_index']  # noqa: E501
        if 'column_index' in params:
            path_params['columnIndex'] = params['column_index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/databases/{databaseName}/tables/{tableIndex}/columns/{columnIndex}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DatabasesnameColumns',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_database(self, name, **kwargs):  # noqa: E501
        """get_database  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_database(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: list[InlineResponse200]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_database_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_database_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_database_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_database  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_database_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: list[InlineResponse200]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/databases/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse200]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_table(self, database_name, table_index, **kwargs):  # noqa: E501
        """get_table  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_table(database_name, table_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_name: (required)
        :param int table_index: (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_table_with_http_info(database_name, table_index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_table_with_http_info(database_name, table_index, **kwargs)  # noqa: E501
            return data

    def get_table_with_http_info(self, database_name, table_index, **kwargs):  # noqa: E501
        """get_table  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_table_with_http_info(database_name, table_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_name: (required)
        :param int table_index: (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['database_name', 'table_index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_name' is set
        if ('database_name' not in params or
                params['database_name'] is None):
            raise ValueError("Missing the required parameter `database_name` when calling `get_table`")  # noqa: E501
        # verify the required parameter 'table_index' is set
        if ('table_index' not in params or
                params['table_index'] is None):
            raise ValueError("Missing the required parameter `table_index` when calling `get_table`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_name' in params:
            path_params['databaseName'] = params['database_name']  # noqa: E501
        if 'table_index' in params:
            path_params['tableIndex'] = params['table_index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/databases/{databaseName}/tables/{tableIndex}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_cell(self, database_name, table_index, row_index, cell_index, **kwargs):  # noqa: E501
        """modify_cell  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_cell(database_name, table_index, row_index, cell_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_name: (required)
        :param int table_index: (required)
        :param int row_index: (required)
        :param int cell_index: (required)
        :param object body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_cell_with_http_info(database_name, table_index, row_index, cell_index, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_cell_with_http_info(database_name, table_index, row_index, cell_index, **kwargs)  # noqa: E501
            return data

    def modify_cell_with_http_info(self, database_name, table_index, row_index, cell_index, **kwargs):  # noqa: E501
        """modify_cell  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_cell_with_http_info(database_name, table_index, row_index, cell_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_name: (required)
        :param int table_index: (required)
        :param int row_index: (required)
        :param int cell_index: (required)
        :param object body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['database_name', 'table_index', 'row_index', 'cell_index', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_cell" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_name' is set
        if ('database_name' not in params or
                params['database_name'] is None):
            raise ValueError("Missing the required parameter `database_name` when calling `modify_cell`")  # noqa: E501
        # verify the required parameter 'table_index' is set
        if ('table_index' not in params or
                params['table_index'] is None):
            raise ValueError("Missing the required parameter `table_index` when calling `modify_cell`")  # noqa: E501
        # verify the required parameter 'row_index' is set
        if ('row_index' not in params or
                params['row_index'] is None):
            raise ValueError("Missing the required parameter `row_index` when calling `modify_cell`")  # noqa: E501
        # verify the required parameter 'cell_index' is set
        if ('cell_index' not in params or
                params['cell_index'] is None):
            raise ValueError("Missing the required parameter `cell_index` when calling `modify_cell`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_name' in params:
            path_params['databaseName'] = params['database_name']  # noqa: E501
        if 'table_index' in params:
            path_params['tableIndex'] = params['table_index']  # noqa: E501
        if 'row_index' in params:
            path_params['rowIndex'] = params['row_index']  # noqa: E501
        if 'cell_index' in params:
            path_params['cellIndex'] = params['cell_index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/databases/{databaseName}/tables/{tableIndex}/rows/{rowIndex}/cells/{cellIndex}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_column(self, database_name, table_index, column_index, **kwargs):  # noqa: E501
        """modify_column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_column(database_name, table_index, column_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_name: (required)
        :param int table_index: (required)
        :param int column_index: (required)
        :param ColumnsColumnIndexBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_column_with_http_info(database_name, table_index, column_index, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_column_with_http_info(database_name, table_index, column_index, **kwargs)  # noqa: E501
            return data

    def modify_column_with_http_info(self, database_name, table_index, column_index, **kwargs):  # noqa: E501
        """modify_column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_column_with_http_info(database_name, table_index, column_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_name: (required)
        :param int table_index: (required)
        :param int column_index: (required)
        :param ColumnsColumnIndexBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['database_name', 'table_index', 'column_index', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_column" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_name' is set
        if ('database_name' not in params or
                params['database_name'] is None):
            raise ValueError("Missing the required parameter `database_name` when calling `modify_column`")  # noqa: E501
        # verify the required parameter 'table_index' is set
        if ('table_index' not in params or
                params['table_index'] is None):
            raise ValueError("Missing the required parameter `table_index` when calling `modify_column`")  # noqa: E501
        # verify the required parameter 'column_index' is set
        if ('column_index' not in params or
                params['column_index'] is None):
            raise ValueError("Missing the required parameter `column_index` when calling `modify_column`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_name' in params:
            path_params['databaseName'] = params['database_name']  # noqa: E501
        if 'table_index' in params:
            path_params['tableIndex'] = params['table_index']  # noqa: E501
        if 'column_index' in params:
            path_params['columnIndex'] = params['column_index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/databases/{databaseName}/tables/{tableIndex}/columns/{columnIndex}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_database(self, name, **kwargs):  # noqa: E501
        """modify_database  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_database(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param DatabasesNameBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_database_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_database_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def modify_database_with_http_info(self, name, **kwargs):  # noqa: E501
        """modify_database  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_database_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param DatabasesNameBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `modify_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/databases/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_table(self, database_name, table_index, **kwargs):  # noqa: E501
        """modify_table  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_table(database_name, table_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_name: (required)
        :param int table_index: (required)
        :param TablesTableIndexBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_table_with_http_info(database_name, table_index, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_table_with_http_info(database_name, table_index, **kwargs)  # noqa: E501
            return data

    def modify_table_with_http_info(self, database_name, table_index, **kwargs):  # noqa: E501
        """modify_table  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_table_with_http_info(database_name, table_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_name: (required)
        :param int table_index: (required)
        :param TablesTableIndexBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['database_name', 'table_index', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_name' is set
        if ('database_name' not in params or
                params['database_name'] is None):
            raise ValueError("Missing the required parameter `database_name` when calling `modify_table`")  # noqa: E501
        # verify the required parameter 'table_index' is set
        if ('table_index' not in params or
                params['table_index'] is None):
            raise ValueError("Missing the required parameter `table_index` when calling `modify_table`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_name' in params:
            path_params['databaseName'] = params['database_name']  # noqa: E501
        if 'table_index' in params:
            path_params['tableIndex'] = params['table_index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/databases/{databaseName}/tables/{tableIndex}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
